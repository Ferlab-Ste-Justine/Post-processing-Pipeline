/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

def default_publish_dir = [
    path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
    mode: params.publish_dir_mode,
    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
]

process {

    publishDir = params.publish_all? default_publish_dir : []

    withName: BCFTOOLS_VIEW {
        container = 'staphb/bcftools:1.20'
        ext.args = { '-Oz --write-index=tbi' }
        ext.prefix = {meta.id + ".standardized.g"}
    }

    withName: BCFTOOLS_FILTER {
        container = 'staphb/bcftools:1.20'
        ext.args = {'-e \'strlen(REF)>1 & strlen(REF)==strlen(ALT) & TYPE="snp"\' -Oz --write-index=tbi'}
        ext.prefix = {meta.id + ".filtered"}
    }

    withName: BCFTOOLS_NORM {
        container = 'staphb/bcftools:1.20'
        ext.args = {'-c w -d all -Oz --write-index=tbi'}
        ext.prefix = {meta.id + ".normalized"}
    }

    withName: COMBINEGVCFS {
        container = 'broadinstitute/gatk:4.5.0.0'
    }

    withName: GATK4_GENOTYPEGVCFS {
        container = 'broadinstitute/gatk:4.5.0.0'
        ext.args = params.allow_old_gatk_data ? "--allow-old-rms-mapping-quality-annotation-data" : ""
        ext.prefix = {meta.id + ".genotyped"}
    }

    withName: GATK4_VARIANTFILTRATION {
        container = 'broadinstitute/gatk:4.5.0.0'
        ext.prefix = {meta.id + ".hardfiltered"}
        //collects all filters given as parameter, separating by name and expression
        def filters = params.hardFilters
        ext.args = {filters.collect{ "--filter \"${it.expression}\" --filter-name \"${it.name}\"" }.join(" ")}
    }

    withName: GATK4_VARIANTRECALIBRATOR_SNP {
        container = 'broadinstitute/gatk:4.5.0.0'
        ext.prefix = {meta.id + ".snp.vqsr"}

        def tranches = params.vqsr_snp_tranches.collect{"-tranche $it"}.join(' ')
        def annotationValues = params.vqsr_snp_annotations.collect{"-an $it"}.join(' ')
        def args_list = [
            tranches,
            annotationValues,
            "--trust-all-polymorphic",
            "--max-gaussians 6",
            "--mode SNP"
        ]
        ext.args = args_list.join(" ")
    }

    withName: EXOMISER { 
        container = 'ferlabcrsj/exomiser:2.4.1'
        publishDir = [
            path: { params.exomiser_outdir ?: "${params.outdir}/exomiser" },
            pattern: '*{vcf.gz,vcf.gz.tbi,tsv,json,html}',
            mode: params.publish_dir_mode,
        ]
        ext.args = { "--output-filename=${meta.id}.exomiser" }
    }

    withName: ENSEMBLVEP_DOWNLOAD {
        // Using the conda container as the official one from esemblorg does not have the download_vep function used in nf-core. 
        container = 'quay.io/biocontainers/ensembl-vep:111.0--pl5321h2a3209d_0' 
        ext.when  = { params.tools && (params.tools.split(',').contains('vep')) }
        ext.args  = '--AUTO c --CONVERT --NO_BIOPERL --NO_HTSLIB --NO_TEST --NO_UPDATE'
        ext.prefix  = { "${params.vep_cache_version}_${params.vep_genome}" }
        publishDir  = [
            mode: params.publish_dir_mode,
            path: { params.outdir_cache ? "${params.outdir_cache}/": "${params.outdir}/cache/" }
        ]
    }

    withName: ENSEMBLVEP_VEP {
        container = 'ensemblorg/ensembl-vep:release_111.0' //sticking to v111 for now, but we should update this
        def args_list =  [
            "--offline",
            "--format vcf",
            "--vcf",
            "--xref_refseq",
            "--variant_class",
            "--numbers",
            "--hgvs",
            "--hgvsg",
            "--canonical",
            "--symbol",
            "--flag_pick",
            "--no_stats",
            "--fields \"Allele,Consequence,IMPACT,SYMBOL,Feature_type,Gene,PICK,Feature,EXON,BIOTYPE,INTRON,HGVSc,HGVSp,STRAND,CDS_position,cDNA_position,Protein_position,Amino_acids,Codons,VARIANT_CLASS,HGVSg,CANONICAL,RefSeq\""
        ]
        ext.args = args_list.join(" ")
        ext.prefix =  {"variants.${meta.id}.snv.vep"}
    }

    withName: '.*VCF_ANNOTATE_ENSEMBLVEP.*' {
        publishDir = [
            path: { params.vep_outdir ?: "${params.outdir}/ensemblvep" },
            publish_mode: params.publish_dir_mode,
            pattern: '*{vcf.gz,vcf.gz.tbi}'
        ]
    }

    withName: TABIX_TABIX {
        container = 'staphb/htslib:1.20'
    }

    withName: 'splitMultiAllelics' {
        container = 'staphb/bcftools:1.20'
        publishDir = [
            enabled: params.save_genotyped || params.tools.isBlank(),
            path: { "${params.outdir}/normalized_genotypes" },
            publish_mode: params.publish_dir_mode,
            pattern: '*{splitted.vcf.gz,splitted.vcf.gz.tbi}'
        ]
    }
}
