{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "https://raw.githubusercontent.com/ferlab/postprocessing/master/nextflow_schema.json",
  "title": "ferlab/postprocessing pipeline parameters",
  "description": "Variant analysis for genome and exome GVCFs",
  "type": "object",
  "definitions": {
    "input_output_options": {
      "title": "Input/output options",
      "type": "object",
      "fa_icon": "fas fa-terminal",
      "description": "Define where the pipeline should find input data and save output data.",
      "required": ["input", "outdir"],
      "properties": {
        "input": {
          "type": "string",
          "format": "file-path",
          "exists": true,
          "mimetype": "text/csv",
          "pattern": "^\\S+\\.csv$",
          "description": "Path to the .csv sample file containing the Family ID, sample ID, sequencing Type and path to GVCF files",
          "help_text": "You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row.",
          "fa_icon": "fas fa-file-csv",
          "schema": "assets/schema_input.json"
        },
        "outdir": {
          "type": "string",
          "format": "directory-path",
          "description": "The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.",
          "fa_icon": "fas fa-folder-open"
        }
      }
    },
    "reference_genome_options": {
      "title": "Reference genome options",
      "type": "object",
      "fa_icon": "fas fa-dna",
      "description": "Reference genome related files and options required for the workflow.",
      "properties": {
        "genome": {
          "type": "string",
          "description": "Name of iGenomes reference.",
          "fa_icon": "fas fa-book",
          "help_text": "If using a reference genome configured in the pipeline using iGenomes, use this parameter to give the ID for the reference. This is then used to build the full paths for all required reference genome files e.g. `--genome GRCh38`. \n\nSee the [nf-core website docs](https://nf-co.re/usage/reference_genomes) for more details.",
          "enum": ["hg19", "hg38"]
        },
        "igenomes_ignore": {
          "type": "boolean",
          "description": "Do not load the iGenomes reference config.",
          "fa_icon": "fas fa-ban",
          "hidden": true,
          "help_text": "Do not load `igenomes.config` when running the pipeline. You may choose this option if you observe clashes between custom parameters and those supplied in `igenomes.config`."
        },
        "broad": {
          "type": "string",
          "description": "Directory containing the references for vqsr",
          "help_text": "Path to the directory containing 4 important files: \\n1. The Hapmap file for vqsr training\\n2. The omni2.5 file for vqsr training\\n3. The 1000G SNP reference file for vqsr training\\n4. The dbsnp database for vqsr training",
          "format": "directory-path"
        },
        "intervalsFile": {
          "type": "string",
          "description": "Path to interval file",
          "help_text": "Path to an interval file. If specified, will be used during the CombineGVCFs step to indicate the regions of interest.",
          "format": "file-path"
        },
        "referenceGenome": {
          "type": "string",
          "description": "Directory containing the referenceGenomeFasta",
          "help_text": "Contains the path to the directory that contains the reference fasta genome.",
          "format": "directory-path"
        },
        "referenceGenomeFasta": {
          "type": "string",
          "description": "Name of the fasta file for the genome",
          "help_text": "Name of the fasta file for the genome we usually apply \"Homo_sapiens_assembly38.fasta\"",
          "format": "file-path"
        },
        "dbsnpFile": {
          "type": "string",
          "description": "Path to dbsnp file.",
          "help_text": "Path to dbsnp file. Will be used to add dbsnp ids in the output vcf ID column if provided.",
          "format": "file-path"
        },
        "dbsnpFileIndex": {
          "type": "string",
          "description": "Path to dbsnp file index.",
          "help_text": "Path to dbsnp file index. Required if specifying the dbsnpFile parameter.",
          "format": "file-path"
        }
      },
      "required": [
        "referenceGenome",
        "referenceGenomeFasta"
      ],
      "if": {
        "required": ["dbsnpFile"]
      },
      "then": {
        "required": ["dbsnpFileIndex"]
      }
    },
    "institutional_config_options": {
      "title": "Institutional config options",
      "type": "object",
      "fa_icon": "fas fa-university",
      "description": "Parameters used to describe centralised config profiles. These should not be edited.",
      "help_text": "The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline.",
      "properties": {
        "custom_config_version": {
          "type": "string",
          "description": "Git commit id for Institutional configs.",
          "default": "master",
          "hidden": true,
          "fa_icon": "fas fa-users-cog"
        },
        "custom_config_base": {
          "type": "string",
          "description": "Base directory for Institutional configs.",
          "default": "https://raw.githubusercontent.com/nf-core/configs/master",
          "hidden": true,
          "help_text": "If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter.",
          "fa_icon": "fas fa-users-cog"
        },
        "config_profile_name": {
          "type": "string",
          "description": "Institutional config name.",
          "hidden": true,
          "fa_icon": "fas fa-users-cog"
        },
        "config_profile_description": {
          "type": "string",
          "description": "Institutional config description.",
          "hidden": true,
          "fa_icon": "fas fa-users-cog"
        }
      }
    },
    "max_job_request_options": {
      "title": "Max job request options",
      "type": "object",
      "fa_icon": "fab fa-acquisitions-incorporated",
      "description": "Set the top limit for requested resources for any single job.",
      "help_text": "If you are running on a smaller system, a pipeline step requesting more resources than are available may cause the Nextflow to stop the run with an error. These options allow you to cap the maximum resources requested by any single job so that the pipeline will run on your system.\n\nNote that you can not _increase_ the resources requested by any job using these options. For that you will need your own configuration file. See [the nf-core website](https://nf-co.re/usage/configuration) for details.",
      "properties": {
        "max_cpus": {
          "type": "integer",
          "description": "Maximum number of CPUs that can be requested for any single job.",
          "default": 16,
          "fa_icon": "fas fa-microchip",
          "hidden": true,
          "help_text": "Use to set an upper-limit for the CPU requirement for each process. Should be an integer e.g. `--max_cpus 1`"
        },
        "max_memory": {
          "type": "string",
          "description": "Maximum amount of memory that can be requested for any single job.",
          "default": "120.GB",
          "fa_icon": "fas fa-memory",
          "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
          "hidden": true,
          "help_text": "Use to set an upper-limit for the memory requirement for each process. Should be a string in the format integer-unit e.g. `--max_memory '8.GB'`"
        },
        "max_time": {
          "type": "string",
          "description": "Maximum amount of time that can be requested for any single job.",
          "default": "12.h",
          "fa_icon": "far fa-clock",
          "pattern": "^(\\d+\\.?\\s*(s|m|h|d|day)\\s*)+$",
          "hidden": true,
          "help_text": "Use to set an upper-limit for the time requirement for each process. Should be a string in the format integer-unit e.g. `--max_time '2.h'`"
        },
        "max_disk": {
          "type": "string",
          "default": "80.GB",
          "description": "Maximum amount of disk space that can be requested for any single job.",
          "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
          "help_text": "Use to set an upper-limit for the disk space requirement for each process. Should be a string in the format integer-unit e.g. `--max_disk '8.GB'`"
        }
      }
    },
    "generic_options": {
      "title": "Generic options",
      "type": "object",
      "fa_icon": "fas fa-file-import",
      "description": "Less common options for the pipeline, typically set in a config file.",
      "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
      "properties": {
        "help": {
          "type": "boolean",
          "description": "Display help text.",
          "fa_icon": "fas fa-question-circle",
          "hidden": true
        },
        "version": {
          "type": "boolean",
          "description": "Display version and exit.",
          "fa_icon": "fas fa-question-circle",
          "hidden": true
        },
        "publish_all": {
          "type": "boolean",
          "description": "Publish results from all processes to the output directory.",
          "help_text": "If true (default false), publish results from all processes to the output directory. This is useful for debugging and testing, but can create a lot of output files."
        },
        "publish_dir_mode": {
          "type": "string",
          "default": "copy",
          "description": "Method used to save pipeline results to output directory.",
          "help_text": "The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.",
          "fa_icon": "fas fa-copy",
          "enum": [
            "symlink",
            "rellink",
            "link",
            "copy",
            "copyNoFollow",
            "move"
          ],
          "hidden": true
        },
        "monochrome_logs": {
          "type": "boolean",
          "description": "Do not use coloured log outputs.",
          "fa_icon": "fas fa-palette",
          "hidden": true
        },
        "validate_params": {
          "type": "boolean",
          "description": "Boolean whether to validate parameters against the schema at runtime",
          "default": true,

          "hidden": true
        },
        "validationShowHiddenParams": {
          "type": "boolean",
          "fa_icon": "far fa-eye-slash",
          "description": "Show all params when using `--help`",
          "hidden": true,
          "help_text": "By default, parameters set as _hidden_ in the schema are not shown on the command line when a user runs with `--help`. Specifying this option will tell the pipeline to show all parameters."
        },
        "validationFailUnrecognisedParams": {
          "type": "boolean",
          "fa_icon": "far fa-check-circle",
          "description": "Validation of parameters fails when an unrecognised parameter is found.",
          "hidden": true,
          "help_text": "By default, when an unrecognised parameter is found, it returns a warinig."
        },
        "validationLenientMode": {
          "type": "boolean",
          "fa_icon": "far fa-check-circle",
          "description": "Validation of parameters in lenient more.",
          "hidden": true,
          "help_text": "Allows string values that are parseable as numbers or booleans. For further information see [JSONSchema docs](https://github.com/everit-org/json-schema#lenient-mode)."
        },
        "pipelines_testdata_base_path": {
          "type": "string",
          "fa_icon": "far fa-check-circle",
          "description": "Base URL or local path to location of pipeline test dataset files",
          "default": "https://raw.githubusercontent.com/nf-core/test-datasets/",
          "hidden": true
        },
        "TSfilterSNP": {
          "type": "string",
          "default": "99",
          "description": "Truth-sensitivity filter level for SNPs",
          "help_text": "Truth-sensitivity filter level for SNPs. This value is required by the VQSR step"
        },
        "TSfilterINDEL": {
          "type": "string",
          "default": "99",
          "help_text": "This value is required by the VQSR step",
          "description": "Truth-sensitivity filter level for Indels"
        },
        "hardFilters": {
          "type": "array",
          "description": "Parameters for Hard-Filtering",
          "help_text": "Parameters for Hard-Filtering. Must be an array containing each desired filter. Each filter must be formatted with the desired name and expression, for example\\n[[name: 'QD1', expression: 'QD < 1.0'],[name: 'QD2', expression: 'QD < 2.0]]"
        },
        "allow_old_gatk_data": {
          "type": "boolean",
          "description": "Allow the use of old GATK data in GATK_GENOTYPEGVCFS process by adding --allow-old-rms-mapping-quality-annotation-data to ext.args. Note: this won't work if ext.args is overridden.",
          "help_text": "Allow the use of old GATK data in GATK_GENOTYPEGVCFS process by adding --allow-old-rms-mapping-quality-annotation-data to ext.args. Note that this won't work if ext.args is overridden. This parameter is not recommended for production use."
        },
        "tools": {
          "type": "string",
          "pattern": "^(vep|exomiser)?(,(vep|exomiser))*$",
          "description": "List of tools to use separate with comma.  Available tools: [vep, exomiser]"
        },
        "exclude_mnps": {
          "type": "boolean",
          "description": "If true, exclude MNPs from the VEP annotation",
          "help_text": "If true (default), exclude MNPs from the VEP annotation. Must be true on whole genome data.",
          "default": true 
        }
      }
    },
    "vep": {
      "title": "vep",
      "type": "object",
      "description": "vep parameters",
      "default": "",
      "properties": {
        "vep_cache": {
          "type": "string",
          "description": "Directory of the Vep Cache",
          "format": "directory-path",
          "help_text": "Path to the vepCache directory, which is usually installed by vep by default. It should contain at least the homo_sapien/111_GRCh38/ directory."
        },
        "vep_cache_version": {
          "type": "string",
          "description": "Which version of the vep cache to annotate with",
          "help text": "We recommend using the same version as vep, i.e. the vep version that matches the container."
        },
        "vep_genome": {
          "type": "string",
          "description": "Will be used by vep to find the assembly version in the cache",
          "help text": "Ex: GRCh38"
        }
      },
      "if": {
        "properties": {
          "tools": {
            "pattern": "vep"
          }
        },
        "required": ["tools"]
      },
      "then": {
        "required": ["vep_cache", "vep_cache_version", "vep_genome"]
      }
    },
    "exomiser_option": {
      "title": "Exomiser option",
      "type": "object",
      "description": "",
      "default": "",
      "properties": {
        "exomiser_analysis_wes": {
          "type": "string",
          "format": "file-path",
          "description": "Path to the exomiser analysis file (.yml) to use for whole exome sequencing input",
          "default": "${projectDir}/assets/exomiser/default_exomiser_WES_analysis.yml",
          "pattern": "^\\S+\\.(yml|yaml|json){1}$",
          "exists": true
        },
        "exomiser_analysis_wgs": {
          "type": "string",
          "format": "file-path",
          "default": "${projectDir}/assets/exomiser/default_exomiser_WGS_analysis.yml",
          "pattern": "^\\S+\\.(yml|yaml|json){1}$",
          "description": "Path to the exomiser analysis file (.yml) to use for whole genome sequencing input",
          "exists": true
        },
        "exomiser_data_dir": {
          "type": "string",
          "format": "directory-path",
          "description": "Path to the  exomiser data directory"
        },
        "exomiser_data_version": {
          "type": "string",
          "description": "Exomiser data version"
        },
        "exomiser_genome": {
          "type": "string",
          "enum": ["hg38", "hg19"],
          "description": "Genome assembly version to be used by exomiser (e.g., hg38 or hg19)"
        },
        "exomiser_cadd_version": {
          "type": "string",
          "description": "Version of cadd data"
        },
        "exomiser_cadd_indel_filename": {
          "type": "string",
          "format": "file-path",
          "description": "The filename of the exomiser CADD indel data file (e.g., gnomad.genomes.r4.0.indel.tsv.gz)",
          "pattern": "^\\S+\\.tsv.gz$"
        },
        "exomiser_cadd_snv_filename": {
          "type": "string",
          "description": "The filename of the exomiser CADD snv data file (e.g., whole_genome_SNVs.tsv.gz)",
          "format": "file-path",
          "pattern": "^\\S+\\.tsv.gz$"
        },
        "exomiser_remm_version": {
          "type": "string",
          "description": "Version of remm data"
        },
        "exomiser_remm_filename": {
          "type": "string",
          "description": "The filename of the exomiser REMM data file (e.g., ReMM.v0.3.1.post1.hg38.tsv.gz)",
          "format": "file-path",
          "pattern": "^\\S+\\.tsv.gz$"
        },
        "exomiser_local_frequency_path": {
          "type": "string",
          "description": "Path to the local frequency data file",
          "format": "file-path",
          "pattern": "^\\S+\\.tsv.gz$"
        },
        "exomiser_local_frequency_index_path": {
          "type": "string",
          "description": "Path to the index of the local frequency data file",
          "format": "file-path",
          "pattern": "^\\S+\\.tbi$"
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "tools": {
                "pattern": "exomiser"
              }
            },
            "required": ["exomiser_remm_version", "tools"]
          },
          "then": {
            "required": ["exomiser_remm_filename"]
          }
        },
        {
          "if": {
            "properties": {
              "tools": {
                "pattern": "exomiser"
              }
            },
            "required": ["exomiser_cadd_version", "tools"]
          },
          "then": {
            "required": [
              "exomiser_cadd_indel_filename",
              "exomiser_cadd_snv_filename"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "tools": {
                "pattern": "exomiser"
              }
            },
            "required": ["tools"]
          },
          "then": {
            "required": [
              "exomiser_genome",
              "exomiser_data_dir",
              "exomiser_data_version"
            ]
          }
        },
        {
          "if": {
            "required": ["exomiser_local_frequency_path"]
          },
          "then": {
            "required": ["exomiser_local_frequency_index_path"]
          }
        }
      ]
    }
  },
  "allOf": [
    {
      "$ref": "#/definitions/input_output_options"
    },
    {
      "$ref": "#/definitions/reference_genome_options"
    },
    {
      "$ref": "#/definitions/institutional_config_options"
    },
    {
      "$ref": "#/definitions/max_job_request_options"
    },
    {
      "$ref": "#/definitions/generic_options"
    },
    {
      "$ref": "#/definitions/vep"
    },
    {
      "$ref": "#/definitions/exomiser_option"
    }
  ]
}
